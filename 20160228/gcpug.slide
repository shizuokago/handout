自営 de GAE
GCPUG Shonan feat.GAE vol.1
28 Feb 2016
Tags: golang, gcpug

secondarykey
Programmer
secondarykey@gmail.com
http://github.com/secondarykey
@secondarykey

* 自己紹介

- 静岡からやってきました！
- 一応Shizuoka.go主催(@hogedigoとともに)
- 静的な型の言語が好き
- だいたい二日酔い

横浜で開催されている

.link http://tanemaki-gae.connpass.com/ タネマキGAE

に参加してたご縁で今回の発表となりました

* クラウドサービスと私

タイトルをオヤジギャグにしてくる位の歳ですので
クラウドサービス黎明期から一応触っているわけです

現在GCP、AWS、Azureと各種ありますが、
クラウドサービスは以前の月額のサービスと比べて

- 使った分を払う(従量課金)
- 増強が比較的容易に可能

などが特徴的です

小さな企業、個人がサービスを思いついたら
すぐ実装できるようになって非常に使い勝手がよくなりました。

* 「Google Cloud Platform」とは

GCPは４つの柱
Compute,Storage,Big Data,Service

.image images/gcp.png 350 350
.caption https://cloud.google.com/

* GCPのはじまりはGAE

GoogleCloudPlatformはGoogleが基盤として使っているCloudの技術を
簡単に使用することが可能になっています。

現在はGCPという名前ですが2013年のGoogleI/Oで発表される以前は
Googleのクラウド環境といえばGoogleAppEngineが主でした。

他の「Compute」がどのようなサービスかを理解してから
本日の特集であるGoogleAppEngineの特徴について話していきましょう。

* Compute Engine（GCE）

* GCEはIaaS環境

GoogleComputeEngineはIaaS環境です
スケーラブルで高パフォーマンスの仮想マシンを提供

- 事前に定義されたマシンタイプ
- Linux,Windowsをサポート
- 分単位の課金

.link https://cloud.google.com/compute/

* Container Engine（GKE）

* GKEはdocker

GCE上でDockerコンテナを実行しKubernetesで管理

- Dockerのサポート
- Kubernetesでコンテナ管理を自動化
- CPUやメモリなどを宣言的管理

.link https://cloud.google.com/container-engine/

* App Engine（GAE）

* GAEはPaaS環境

GoogleAppEngineはPaaS環境です。
使用するメリットは

- 素早く構築ができる
- 自動スケーリング

これらが一番大きな特徴です

インフラのことをあまり考えることなく
手軽にWebアプリケーションの構築が可能になります

開発者がプログラムのみに集中することが可能です

* デメリット

もちろんデメリットもあります

- ロックインされてしまう
- Webアプリのみの開発
- 静的ファイルが扱えない※注

PaaSである以上しょうがないのですが、
同じアプリケーションを他のサービスに持っていくのが比較的難しくなります

メールサーバやDNSを立てることは不可能ですので
難しい仕組みを作り出すことはコツが必要です

* それでも私がGAEを使う理由

* 楽しい！

私はこの一言に尽きるのですが、
従量課金なので処理速度などを考えるプログラミングに依存してきます

今回するGAEの特徴などを抑えて、
どのようにすれば、どの部分に課金がかかるか？などが
デメリット以上にエンジニアとして非常に楽しいです

* 簡単なアプリを作成

* まずは言語を選択

- Python
- Java
- PHP
- Go

私はサービス開始時のPythonから入り、
JavaができたらJavaに移り、現在ではGoを使用しています
※2015/7 に正式サポート開始しました！

様々な言語で使用できるフレームワークが存在するので
それらを言語の選定基準にしてもいいかもしれません

* Goの優位性

どの言語でも良いと思うのですが、サーバの起動速度(spin-up)が速いです

並行処理も容易にかけ、パフォーマンスも良いので
課金額を抑えることも忘れてはいけません

* SDKのインストール

.link https://cloud.google.com/appengine/downloads ダウンロードページ

でインストールします
各言語でインストール手順などが違うので気をつけてください

※今回の説明で出てくるのはGoです

* ファイルの構成

アプリケーションのディレクトリを作成し、
以下のように構成しておきます

    samples/
    | src/
    | | hello.go
    | app.yaml


* app.yaml

    application: [your-app-id]
    version: 1
    runtime: go
    api_version: go1
    
    handlers:
      - url: /.*
        script: _go_app
      - url: /static
        static_dir: static
        application_readable: true

アプリケーションのIDは後述するコンソールで発行するIDです
使用する言語のバージョンなどを指定していき、
URLに対して何を動作させるかを書いていきます

* hello.go

.code src/hello.go

Goを触ったことある人ならわかると思いますが、
オンプレミスで使用するhttpパッケージで作成が可能です

* ローカル実行

    goapp serve .

でローカル実行を行います

.link localhost:8080

以下がローカルのコンソールになります

.link localhost:8000

* デプロイ

.link https://console.developers.google.com/project

ここからプロジェクトの作成を行います
※もちろんGoogleアカウントが必要です
プロジェクトが作成されるとアプリ用のコンソールが準備されます

.link https://console.developers.google.com/home/dashboard

この画面でアプリケーションを管理していきます
※選択しているIDのページになります

    goapp deploy .

このコマンドでデプロイして、以下で確認します

.link http://your-app-id.appspot.com/

これだけで全世界に配信開始！

* 課金について

* さまざまな機能の上限があります

.link https://console.cloud.google.com/appengine/quotadetails

思った以上に使えるのでプロトタイプレベルのサービスであれば
おそらく無料で使えるものが作れるかと思います
※あくまでものによりますので注意を

一旦リリースしながら試して、
有料に切り替えてサービス開始などが可能になっています

２４時間でリセットされます

* Versions

* Versions : バージョン管理

デプロイ時にバージョンを指定することが可能です

.link http://version.your-app-id.appspot.com/

で実行することが可能で
defaultを指定してタイミングに合わせて切り替えが可能です

* Datastore

* Datastore : スケーラブルNoSQLデータベース

最大の特徴であり、最大の腕の見せ所がDatastoreです

今回は@sinmetalさんが説明していただけるので割愛します

* Memcache

* Memcache : 分散メモリキャッシュ

キーを元にデータを取り出すことができる機能で非常に高速です
無料で使えますが、無料の状態だとタイミングによっては消えます
※有料だと消えないです

Datastoreの特徴により一緒に使うことが多いです

* Task Queue

* Task Queue : 非同期メッセージング

その名の通り、タスクをキューに貯めこんでおくことができる機能です
処理が成功するまで何度でもリトライしてくれます

実行時間が長い処理、他サービスと連携が必要、
そんなに急がなくてもいい処理などを記述していきます

キューにはPush,Pullがあり、Pullは外部から実行することも可能です
※実行は基本的にURLになります

* Mail

* Mail : 送受信が可能

メールの送信が可能です

受信も可能ですが、受信の場合も受信と同時に
Webアクセスが発生する形になっています


* Security Scan

* Security Scan : 自動セキュリティスキャン

Webアプリケーション内にある

- XSS
- Flashに脆弱性がないか？(Flash injection)
- HTTPとHTTPSが混じっていないか？(Mixed-content)
- 安全でないJavaScriptライブラリが存在しないか？

を監視してくれます


* その他

- Cron
- Modules
- Search
- etc

* デメリットを解消する方法

デメリットで心配になった部分でもある

- ファイルアクセス
- RDBではない(Datastore)

ですが

- ManagedVMs(Beta)
- Cloud Storage
- Cloud SQL

GCP内のサービスを使用することで解消も可能ですので安心してください

EdgeCacheなどを使ったアクセスなども効果的かと思います

* Let's try!

私がGAEを始めたころよりはかなり融通が効くようになってますので
みなさんも頑張ってトライしてもらえたらと思います

今回の資料を作るまで
最新はそんなに追っかけてなかったので私もトライしていきたいと思います！

