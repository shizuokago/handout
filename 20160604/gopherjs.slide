GopherJSでJavaScriptをビルドする
polidog が優しく教えてくれるJavaScriptビルドツールのワークショップ
4 Jun 2016
Tags: golang,GopherJS,polidog

secondarykey
Programmer
secondarykey@gmail.com
http://github.com/secondarykey
@secondarykey

* 自己紹介

- Name secondarykey
- Job Programer
- VJ イカスクリュー

* Shizuoka.go

* Shizuoka.go

静岡で開催しているGo言語の勉強会です

最近開催してないのでネタがたまってきたので、しゃべります。

* Go言語でJavaScriptを書こう！

* GopherJS

Shizuoka.goが快適なGoライフを実現する為に
今回提供するネタは「GopherJS」です

- Go言語でJavaScriptを出力する
- Goだけで開発が可能

この辺りを数か月前には聞いていたのですが、
まぁかなり漠然としていました。

* サンプルとデモ

* 動くもの見せろ？ﾜｶﾘﾏｽ

サンプルプログラムを動かしてみます。

- Goファイルの確認
- gopherjs でのbuild(js,map)
- ページの確認
- Goでのデバッグ

* バインドしているもの

- DOM
- jQuery
- Chrome
- etc

* できないこと

- 外部ファイルを呼び出す
- ライブラリ(soやCGOなど)を参照するプログラム

この辺りを気を付けさえすれば、
様々なものが簡単に動作するものを作成可能です

* 実際に使ってみた

* とある時に

Shizuoka.go用のブログを作成しました

- Shizuoka.goを広める為
- GAE/Goのお勉強

.link http://shizuokago.appspot.com/

一番苦戦したのはMDLでのデザインでしたが><

* レンダリングエンジン

このブログではレンダリングに

    golang.org/x/tools/present

を使用しています。

これはGo言語で書かれたマークダウンをレンダリングするツールで
Go言語のプレゼンテーションではよく見かけるやつです。
※このプレゼンもそうです

* ブログの仕組みを見てみましょう


データの構成話


* 少しよりみち

* GAEでの設計の話

ブログに関して言うと、見られるコンテンツになるので
例えば下手な設計を行うと

- Blog検索
- Article検索
- User検索
- presentによるレンダリング
- HTML出力

となるわけです。

* そうしない為には

管理画面において、HTMLを作成しておき、それをPublishしておく。
そうすると１つの記事を出力するのに１つのHTMLを検索するだけになります

- 極力Datastoreへのアクセスを減らす
- 極力CPU処理等を減らす

が可能になり、料金も格安になります。

このブログのモデルはまだ動的ですが、
静的なモードが可能なようにも考えている位です


* で、元に戻りまして

* エディタ上での問題

記事を書くときにデザインを見ながら書きたかったので
Qiitaみたいに2ペインで画面を考えてました。

が、presentによるHTML描画を行っているので、
サーバサイド(golang)がないとHTMLが出力できないことになります。

* ....(ｻｯｼ) 

* そう！ここでGopherJS！

まぁどうせ俺しか使わないし
正直Viewerに更新ボタンつけて都度確認しようかな？と思っていました。

そんな時に一言いただきました。

「GopherJSでも使えば？」

・・・・正直GopherJSの勉強をやりたかったのが一番強いかも。

* ってことで

ご覧の通り、動作するようになりました。

まだ開発中、デザイン中のブログだったので、
テンプレートやエディタの変更を行った時に、
環境がHotReloadされないので、開発リズムが狂う。。。。

- 編集したらgopherjsコマンド
- JavaScriptファイルを環境にコピー

・・・gulpが行うようなことが必要なわけです
一旦ビルドして、コピーするデプロイコマンドを作成します。

* そこでfsnotify！

ファイルシステムを監視する為のツールです。

※一部紹介

* 比較

GopherJSの監視とminify
gulpの監視とminify

* GopherJSの使い勝手

よっぽどGoだけでってやらないと重くなる
JSっぽくかけるのでJSでいいかな？って思うようになる

* 結論

Goは楽しいよ。

