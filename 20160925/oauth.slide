OAuth Sample(GAE)
GCPUG Shonan vol.6 feat.GAE
25 Sep 2016
Tags: gcpug,shonan

secondarykey
Programer
admin@localhost
http://github.com/secondarykey
@secondarykey

* 自己紹介

- name:secondarykey
- job:Programer
- Twitter:secondarykey
- GitHub :secondarykey

.image images/wave.jpg 250 _

Shizuoka.goを開催しているものです。



* 本日のやること

- ハンズオン準備
- サンプルデモ
- GoogleのAPIの呼び出しに必要なもの
- 各言語での説明
- ローカル実行
- デプロイ
- 別サービスへの接続(デモ)

* OAuthとは

先程説明がありましたが、

Webサーバにあるユーザのリソースへのアクセス権限を、ユーザの代理で行うことを許可する為の認証用のプロトコル(IT用語辞典より)

現在APIを提供しているサービスの多くがOAuthを利用しています。


* 実際に作ったもの

Twitterの情報を集めてCSV形式にデータをDropboxに送り込む。
というものを作ったとこがあります。
※Twitter社のAPIはOAuth1,当時のDropboxもV1でした。

少し見てみましょう

* 気をつけること

このサービス自体はGAEのプロジェクトの管理者権限がある人のみが利用可能で、外部に公開しているサービスではありません。
なのでOAuthを利用せずにTwitterを検索してそれをDatastoreやGCSに貯めこむということも可能でしたが、サービスに関係ない私もテスト的に使用したかったのもありOAuthを利用しました。(同一アカウントで利用してしまうとDropboxに私の検索結果を入れ込むことになる)

またOAuthをサービスではユーザ毎にAPI呼び出しの制限などを持っていたりもするのでそれらを緩和する為にもOAuthを利用しています。

* ハンズオン内容

* SDKのダウンロード

今回はGAE上にGoogle(Gmail)にOAuthアクセスするサイトを作成します

- OAuthに必要なものを発行
- サンプルをローカルで構築
- 実際にデプロイしてみる

各言語のSDKの準備はお済みでしょうか？
もしダウンロードされてないようならダウンロードしておきましょう

.link https://cloud.google.com/appengine/downloads


###各自の環境を確認###

* サンプルコード

.link http://github.com/shizuokago/oauth_sample

各言語分ブランチに置いてあります

    git clone -b xxxx http://github.com/shizuokago/oauth_sample

xxxx -> go,php,python,java

gitがない方はzipをダウンロードしてください
本当に簡単なサンプルなので各言語で読むことが可能だと思います

* デモサイト

https://[xxxx]-dot-kneetenzero.appspot.com/

言語毎にバージョニングしています
[xxxx] -> go,php,python,java

このURLは別のサービスで使おうと思っている場所なので、デモ後にはなくなっている可能性があります
-dot-はSSLが「*.appspot.com」で発行されている為使用するものです。

.link https://cloud.google.com/appengine/docs/go/config/appref#handlers_secure

各言語でデプロイできるなんてGAEって便利ですね！

* サイトの仕様 

- /index -> ClientID/Secretを入力 -> /requestにpost
- /request -> 認可のURLを作成して、リダイレクト
- [認可画面に遷移]
- /callback -> 認可後に戻ってきて、access tokenを取得しGmailにアクセス

という動きをします

* 今回のサンプル

今回のサンプルはIDとSecretをUIから入力していますが、
通常はアプリケーションがどこかで保管しているはずです

設定ファイルとしてJSON形式などで保存する方法がありますが
私はソース内に埋め込むとGitHubなどで公開できないのでDatastoreに保存することがほとんどです。

* Client ID/Secretについて

とある人気アプリの不正ツールはこのIDを抜き出して、全体の権限を取得していたといわれています。 ようはこのIDが漏れた場合、盗んだ側はサービス提供者として別のサービスを提供することが可能になるわけです。

コード内などに暗号化して保存しておくのが懸命だと思いますが、結局呼び出す時は復号化しているはずなので、どの程度守るかなども重要になってきます


* クライアントライブラリ

Google自体にアクセス用のライブラリが用意もされています。
Googleのみにアクセスしたい場合はこちらを使った方が良いかもしれません。

.link https://developers.google.com/identity/protocols/OAuth2

.caption ライブラリはページの下側

今回PHPとPythonではこちらを使ってアクセスしています

* 各言語の説明

* Go

使用しているライブラリをGOPATHに設定する必要があるので

    go get golang.org/x/net/oauth2
    go get github.com/gorilla/sessions
    go get google.golang.org/appengine

をお願いします


* Python

Googe API Clientを利用しました

    pip install -t libs google-api-python-client --upgrade

libsにベンダのソースを置いてwebapps2のセッション機能を使用しています

リダイレクトのURLを
https://[your_app_id]-dot-appspot.comに変更してください。

.link https://github.com/shizuokago/oauth_sample/blob/python/oauth.py#L49


* PHP

Googe API Clientを利用しました

    git clone -b v1-master https://github.com/google/google-api-php-client.git
    google-api-php-client
    composer install

リダイレクトのURLを
https://[your_app_id]-dot-appspot.comに変更してください。

.link https://github.com/shizuokago/oauth_sample/blob/php/request.php#L8


* Java

- oltu(common/client)
- json.org

を利用しています。
唯一Eclipseを利用して開発しています

リダイレクトのURLを
https://[your_app_id]-dot-appspot.comに変更してください。

.link https://github.com/shizuokago/oauth_sample/blob/java/src/com/github/shizuokago/OAuthRequestServlet.java#L15

* API使用の準備

* 作成に必要なものを発行

.link http://console.developers.google.com/

にアクセスしてください

* プロジェクトの作成

上部にあるメニューから

.image images/menu.png

[Create Project]をクリックして,IDを入力します
IDは世界で１つですので重複のないものを指定します
(後で使用するので覚えておきましょう)

* Gmail APIへのアクセスを指定

GmailAPIにアクセスする権限を作成します

.image images/gmailapi.png

でGmail APIを指定します

そこで[ENABLE]をクリックします

.image images/enable.png

* 認可情報の作成

認可情報の作成をしていきます
[Go to Credentials]が右上に表示されると思いますので

.image images/create.png

ここをクリックします

* Add credencial to your project

.image images/webserver.png 300 _

- Web server
- Application data
- Yes,I'm using one or both

を選択し決定します。
次の画面で[done]を押下してください。

* Create credentials

ボタンをクリックすると一覧が出てきますので
そこで[OAuth client ID]を指定します

.image images/oauth.png

* 表示情報の設定

ここで認可を行う時に相手に表示する情報を入力します
ようは認可を行ってもらう上で相手に信用してもらう為の情報を表示します。

.image images/screen.png 400 _

* アプリケーションタイプの指定

今回はWebサーバでの認可ですので[Web application]を選択してください

.image images/callback.png 350 _

WebApplicationはCallbackが必要ですのでそちらも入力します
https://[your_app_id]-dot-appspot.com/callback を追加してください

* 発行完了！

.image images/id.png

この情報が一番漏れてはいけない情報です。
万が一漏れた場合はresetがあります。

* スコープの確認

OAuthにはスコープの概念があります

.link https://developers.google.com/gmail/api/auth/scopes

に欲しいものがあればそちらで設定します。（複数指定可能）
ちなみにGoogleではURL方式です

例えば今回のアクセスに必要な権限

[https://www.googleapis.com/auth/gmail.readonly]

をscopeとして設定しますが、
他のサービスにもスコープさえ設定すればアクセスすることが可能です

* アクセスするAPI

今回は

https://www.googleapis.com/gmail/v1/users/userId/labels

でラベルの一覧をとってきています
userIdは今回は自分のみのアクセスになるので認可してもらっているユーザを示す「me」を指定します、他のユーザを指定する場合は別のAPIで取得して指定してあげます

ドキュメントはここになります

.link https://developers.google.com/gmail/api/v1/reference/users/labels

今回の権限はreadonlyですが、権限を追加して、サービスの実現を行います

* ローカルでの実行

ちょっと各自の環境で動くか心配なので割愛しようと思っています

* デプロイ

* AppEngineの設定

プロジェクト直下にあるapp.yaml(Javaの場合はappengine-web.xml)のIDを[kneetenzero]から自身が今回発行したプロジェクトIDに設定します

バージョンも変更しましょう

- Go : goapp deploy .
- Python : gcloud deploy 
- PHP : gcloud deploy 
- Java : Eclipseからデプロイ

Python,PHPともgoappでdeployしたので嘘かも><
JavaはCUIなどから行う場合はmavenでできるようなことが書いてあります

* TOKENの有効期限とリフレッシュ

OAuthはアクセストークンを取得してアクセスしますが、有効期限が存在する場合があります。
サービスによっても違うのですが、リフレッシュトークンがある場合、有効期限を過ぎていた場合リフレッシュする必要があります。
Tokenの有効期限は盗まれた場合に効力を発揮しますが、リフレッシュトークンまで盗まれた場合は結果一緒になります。

最悪盗まれた場合は最終手段としてアプリへの権限を削除するという方法が必要です。エンドユーザへの周知なども必要です。

* 結局どのデータを保存するのか？

エンドユーザに都度認可を行わせたくない場合はアクセストークン、リフレッシュトークンなどを保存する必要があります。
ただし有効期限が存在するがリフレッシュがないサービスなどもあるのでアクセスするサービスでそれぞれの実装を考えるべきです

* 他サービスへのアクセス

* Dropboxにアクセスしてみる

どんなサービスもそうですが、大体APIを持つサービスでは開発者のページがありますので、そちらに行ってみます。

.link https://www.dropbox.com/developers

.image images/dropbox.png 300 _

* REST API

Dropboxにもアクセスするライブラリが一部用意されていますが今回はHTTPを選択します

.link https://www.dropbox.com/developers/documentation/http/documentation

アプリの設定もGoogleの時と同様に行います

.link https://www.dropbox.com/developers/apps

* デモ

OAuth認可後にファイルをアップロードできます

.link https://kneetenzero.appspot.com/

Dropboxはアプリ設定で全体の権限かアプリ用のディレクトリアクセスかを行うので純粋なOAuth2ではないかも。。。。
もしこのサイトでアップロードを行うとご自身のDropboxに[kneetenzero]ディレクトリができ、そこにファイルアップロードされます

* 最後に

作成したプロジェクトは使用しないのであれば削除してください。

サンプルのコードで確認した際に認可へのURLの時にClilentSecretが混ざる状態になっています。
通常はサンプルのように画面から渡す値ではないので大丈夫だと思いますが、注意してください。

なお使用したサンプルソースもハンズオンの機会がある度に修正していく可能性があります。
masterブランチは別途Goの勉強会で使う予定でいるので、この資料でGoを確認する場合はgoブランチをお使いください
