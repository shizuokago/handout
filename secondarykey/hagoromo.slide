音楽祭をGAE/Goで支えてみた
Shizuoka.go Vol.13
30 Mar 2019
Tags:golang,shizuokago

secondarykey
Programmer
@secondarykey

* GAE/Goについて

GAEはGoogleCloudPlatformのPaaS環境で非常に簡単にサイトを立ち上げることが可能です。重量課金なのでアクセス数に応じた値段を払うだけでよく、無料分もありますので大変有用だと思います。

今回は@hogedigo と@nukipon がいるなかで緊張しておりますが、とある音楽祭のページを構築した話をさせていただきます。

ちなみにサイトを構築する仕事は普段しないのですが、
GoogleAppEngineでイベントサイトを作れるっていうのもなかなかないのでお手伝いすることにしました。

最終的な数値は高くないですが、この程度のアクセスなら技術者１人でやれるという参考になれば幸いです。
また値段等は当時メモ書きした時の値段なので最新のものはサイトでご確認を。

* オフレコ

※当日ローカル書き足す。

* 気を取り直して、、、

* May.2018

実は忘れてたので焦って再度確認に行き、やるってことだったのでGWに泣きながら実装し、一旦CMSの完成。

.link https://github.com/secondarykey/fes fes

この時期に1000Viewを無料で動作することを簡易的に確認しました。
GoogleAppEngineは１日の使用に対しての課金になり、時間でリセットされます。


* 最初の敵:ReadOperation

Datastoreを読み込んだ場合に課金対象になるものです。

    0.05 MillionOps 無料
    $0.78 / Million Ops

これがおそらく1000Viewを超えた辺りで怪しくなることに
※実はわかっていてあわよくば動けと思っていた確信犯です。

ちなみに画像、スタイルシートなどもすべてDatastoreにぶっこんで管理しています。


* Publish機能を追加

リアルタイム性を重視して、html/template で動的にHTMLを書き出していたのですが、この時に

・テンプレートを抜き出す
・ページデータを抜き出す
・コンテンツデータを抜き出す
・下の構造をぬきだす

ということを行っていました。１ページ見るだけでかなりの数になってしまいます。

そこでPublishするというフローを入れて書き出す時にHTMLとして残すようにします。
なのでHTML自体は１つのReadで行うようなりました。


* 次なる刺客:Outgoing Bandwidth

通信量ですね。

    $0.156 / GB(無料1GB)

アーティストページにアクセスが集中し、画像データがかなり逼迫していました。
アーティストの画像なので無碍に画像を粗くもできないというジレンマが生じる

* エッジキャッシュ！

おそらくGoogleAppEngineでページを表示する上で一番重要な機能といっても過言ではないキャッシュです。
HTMLアクセス部分でResponseのHaederに

    w.Header().Set("Cache-Control", "public, max-age=" + val)

とするだけでOKです。

* 注意点

キャッシュに載ってしまうと、基本的に有効期限まで廃棄できませんので
アーティストなどからの急な変更、致命的な表示ミスなどもある事を考えて長くは設定できなかったのでチューニングにかなり気を使いました。

* Oct.2018

・・・・かっこいい画像が欲しいところですが、
なんと当日忙しすぎて写真を撮ってないという恐ろしい状態。

※実はこっそりイカスクリューも参戦していた。



* 総アクセス数

2018/7/12 - 2018/10/25 の総アクセス数:86212view
2018/10/20 最大１日アクセス数 6873view

.image all_access.jpg _ 800

すべて動的なコンテンツを無料で乗り切りました！

* 今後について

今年もお手伝いすると思いますので、応援よろしくお願いします！
fesのテンプレート作成部分などのUIを向上していく予定。

実はこの当時から比べるとGAE/Goも大きな転換期に入っていまして、ちょうど先日1.12にも対応したのでそれもやって行かないといけないところです。

まぁサイト運営でなく、技術的な部分でのバックアップだけでお手伝いしたいものです。

