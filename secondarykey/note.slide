Note Shrink with Go
Shizuoka.go Vol.13
30 Mar 2019
Tags:golang,shizuokago

secondarykey
Programmer
@secondarykey

* 元ネタ

.link https://mzucker.github.io/2016/09/20/noteshrink.html Compressing and enhancing hand-written notes

手書きノートを圧縮するという2016年のブログ記事になります。

* 筆者が困っていたこと

手書きのノートをスキャンするとPNGで7.2MB

クオリティを落としてJPEG化すると790KB

これをPDF化すると重くなって困っている。というもの。

これを軽くする為のプログラムを書いたという記事です。

* 結果(before - after)

.image notesA1_comparison.png _ 800

.caption 121KBまで圧縮に成功！

* 面白かったのでコンバート

.link https://github.com/shizuokago/noteshrink ソース

この記事のソリューションが楽しくてコンバートしちゃいました！

* やってること

・サンプリング
・色を選定
・色を適用

と簡単に書くとこういう感じです。

* サンプリング

5,000,000ピクセルのデータを扱ってもほとんど同じ色だから10000くらいにしちゃえ！

どうせ似た色だから、シフト演算(8bit->4bit)して色を落としちゃえ！

* 色を選定

背景色を「一番出現した色」としています。まぁノートの場合、白に近い色だと思います。
※色を落とした状態だと30%以上を占めるようになります。

残す色(使用する色)を選定する為にRGB空間を使用するとうまいこと色が出てこないのでHSV空間と呼ばれる空間に投影します。色(Hue)-彩度(Saturation)-明るさ(Value)という表現の空間です。

色自体は空間でkmeansを使って求めます。

* kmeans is k平均法

k平均法というクラスタリングのアルゴリズムです。

ランダムで出力したい件数分(k)を決定して、kのどの値かに一番近いかを求めてクラスタが決定したら、クラスタで平均を求めて、それを繰り返して最後に残ったものを採用する。というもの。

値が動かなくなるか、処理回数を決定して終了します。


* 色の適用

クラスタリングに一番違いところに変更すればできあがり！


* Let's Go!

* image.Image

Go言語で画像を扱う場合、標準パッケージであるimageを利用します。

    img, fmt, err := image.Decode(file)

という感じで簡単に画像を読み込めます。file はio.Readerになります。

import 文で

	"image"
	_ "image/jpeg"
	_ "image/png"

と記述します

* gonum

おそらくGo言語における行列計算の一番メジャーなライブラリです。

.link https://www.gonum.org/ GONUM

本家がnumpyを多用していますので、本当はgonumを利用したかったのですが、画像から取り出したり、最後に画像に戻すところでどうしてもgonumをうまく使うこと(早い処理が思いつかず)ができずに断念しました。

イメージとしてはnumpyはarrayで柔軟に扱えるのに対して、gonumは型になってしまうという感じでしょうか。

PythonのPILとnumpyの相性の良さだけが印象に残りました。

* math.Pow() が遅い

遅いというよりも使い所を間違ったら遅いです。
ベンチマークを取って計測していたらpowが気になりまして、距離計算で２乗している箇所がありました。

中身を見たら難しい計算があります。

.link https://golang.org/src/math/pow.go

これを単純に２乗にしたら 91.4ns -> 1.63ns に向上しました。
※これをピクセル数ｘ処理数って考えると非常に高速になります。


* JPEGの色の扱い

JPEGでエンコードした場合、純粋なRGBが取得できません。
これはJPEGがY-CB-CRという色の表現を行うからで、

    color.YCbCrToRGB()

を使わないとRGBを抜き出すことが不可能です

* GIF化

指定色少ないんで256のGIFなら軽いんじゃね？と思って設定しました。

   gif.Options.NumColors
   gif.Options.Quantizer

でOptionを生成してあげて、

    gif.Encode(out,img,op)

って感じで行うと限定色のGIFを出力することができます。
で減色をどこまで行うか？というものを行います。(Quantizerは色から色を返すQuantize()を持つinterfaceです)

ただし７色で100kb(10kb軽減)位しか効果はなかったです。

* 総括

色むずい。
