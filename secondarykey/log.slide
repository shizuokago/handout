logのお話
Shizuoka.go Vol.14
20 Jul 2019
Tags:golang

secondarykey
Programmer
https://github.com/secondarykey/
@secondarykey

* ログ取ってますか？

errorの話をしたのでなんならと思ってlogの話を追加してみました。
決してtryの話が飛んだからではありません。

以前はコマンド等ではfmt.Println()を使用していたのですが、
最近はlogパッケージを使うようにしています。

* logについて

    「あなたのライブラリのユーザーはあなたが提供する機能を使いたいのであって、
    あなたが使いたいロギングライブラリを使いたいわけではないのです。」

.link https://www.kaoriya.net/blog/2018/12/16/ Golangでログを吐くコツ

多分なんかのミドルウェア的なものを使おうと思った時に「このログオブジェクトを渡してね」みたいな実装を見たタイミングとドンピシャでこの記事を読んだので強烈に覚えています。

・・・んじゃおめー(私)はJava書く時にLog4Jじゃなくて
java.util.Logger 使ってんのか？って話をされると困るんだけど。


* logパッケージを使う

ちょっと使ってみましょう。一番単純な使い方は

    log.Println()
    log.Printf()

ですね。

何も設定を行わない場合

     2019/07/20 09:56:17 Print log

と時刻と文字列が出力されます。
fmt.Printf()などと特に変わることはありません。

* Ex: log.Fatal()について

fmtでもそうですが、Fatalは極力使わないようにしています。
突然プロセスが終了してしまうので、panic()起こした方がマシかと、、、

・・・って思ってたら

  log.Panic()

がありました。。。まぁ使わない方がいいと思います。

* logの書式の変更

ログの書式を変更するには

   log.SetFlags(int)

を使用しフラグは

    Ldate         = 1 << iota
    Ltime
    Lmicroseconds
    Llongfile
    Lshortfile
    LUTC
    LstdFlags     = Ldate | Ltime

となっています。

* 実際に書式を設定

    log.SetFlags(log.LstdFlags | log.Lshortfile)

というようにOR演算子で設定を行い、

    2019/07/20 10:08:06 log.go:12: Print log

という風に出力されるようになります。Llongfileは絶対パスで出力されます。

* 出力先の変更

デフォルトでは出力先は標準出力になっていますが、

    log.SetOutput(io.Writer)

で出力先を変更することが可能です。

* ライブラリとして

おそらくログの設定はinit() で変更を行うことが多いと思いますが、
ライブラリの時はアプリ側に任せることで、自由な書式を提供することができると思います。

* Ex: fmt.Print()との違い

なんかのコードを書いた時にWriterを変更してログを出していたんだけど、
test時にExampleXxxxの標準出力をテストする時にlogで標準出力を指してもダメだった記憶があります。

多分テスト時の挙動の違いなんだろうけど、非常に謎でした。
※後日追いかける予定でしたが、放置しています

* log.Logger

logでは大域でしか処理できない為、ファイルをローリングしたいなどの時は

    log.Logger

を利用する方がよいと思います。

    log.New(io.Writer,string,flags)

で生成することが可能で、Loggerはlogと同様のメソッドを持っています。
割愛してしまいましたが、第二引数のstringはprefixとして表示してくれます。

    log.SetPrefix(string)

で設定が可能です。

* レベリング

Go言語は低レベルの部分しか用意してくれていません。
この程度は用意してくれてもいいかな？とも思いますが、
結局レベリングなんてアプリの要件次第ってことでしょうか。。。

アプリはロギングライブラリを使うことになりと思います。

* ロギングライブラリ

一応紹介しておきます。

- github.com/google/glog
- github.com/uber-go/zap

辺りですかねー

glogはC++で有名らしい。zapは高速らしい。


* 結論

ライブラリはロギングライブラリではなく、極力errorでのみ処理をできるようにして、
アプリ側に任せる。。。。っていうとなんとも言えないまとめに。
