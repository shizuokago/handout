GAE/Goでブログつくった
GCPUG Shonan feat.GAE vol.3
19 Jun 2016
Tags: golang,GCPUG,GAE

secondarykey
Programmer
secondarykey@gmail.com
http://github.com/secondarykey
@secondarykey

* 自己紹介

- Name:secondarykey
- Job:Programer
- Add:Shizuoka

GCPUG 湘南支部静岡分署準構成員(自称)です
鎌倉辺りで遠い昔働いていたこともあります

@hogedigo さんと静岡でShizuoka.goを開催しています

* GoogleAppEngineとの出会い

GAE(Python)が発表された時に夢のようなサービスが開始された！と飛びつき、GAE(Java)が発表された時にこれは使うしかない！となり、appengine ja nightでGoogleのクラウドの凄さを知り、今に至ります

現在はGCPとして様々なサービスが打ち出されていますが、現在でもGoogleAppEngineが一番触っています

* Shizuoka.goのブログ

* GAE/Goで作ってみる

実施する毎に静的なHTMLを書いていたのですが２，３回前から書かなくなってしまって、書きやすいブログにしようと思ったのがきっかけです

せっかく作るならGo言語で！ってことで無料枠が大きいGAEに決定しました
GAE/Go自体はなんとなく動くものを作ったことある程度だったので、勉強でも兼ねて開始しました。

.link http://shizuoka-go.appspot.com/ ブログ
.link http://github.com/shizuokago/blog ソース

* ブログ概要

* レンダリング

せっかくGo言語で書くので、Gopherにはおなじみの

.link http://golang.org/x/tools/present

を利用してします。

このスライドもpresentを利用しています

* ブログのコンセプト

基本的にコードや説明文が多くなり殺風景になるので画像を必須にしようと思いタイトルの部分を画像にしました。
昨今のSNS風にしたかった部分もあります

ちょうどGoogleのMaterialDesignLiteのテンプレートにやりたい感じのデモサイトがあったのでそれを使うことにしました。

* 記事を投稿する流れ

- 画像をアップロードする
- マークダウン(present)を書く
- レンダリングし、HTMLを作成する

という手順で記事を書いていきます
記事を更新する部分でGopherJSを採用するなどしていますが、その辺りの話は本日はないのでご興味あれば是非

.link http://go-talks.appspot.com/github.com/shizuokago/handout/20160604/gopherjs.slide

* Datastore

* 保存領域は極力簡素に

GCP内には様々な保存領域があります

- Blobstore
- CloudStorage

- Bigtable
- Datastore
- CloudSQL

全データ(ファイルも)をあえてDatastoreにしてあります。

* Datastoreの制限

- 全体で1GB(Billing設定時無制限)
- 1Entityに1MBまで

前者にひっかかれば、課金設定を行うだけ、データ登録時に後者だけ気をつければ大丈夫です
※この制限にかかるような場合、BlobstoreやCloudStorageにコンバートする必要があります

* Datastore = KVS(Key Value Store)

データストアはKVSなのでキーの作成を

- ユーザ = ログインのユーザID
- ブログ情報 = UUID(****-****- ...) -> URL
- ファイル = ファイルパス(gopher.jpg) -> URL

ブログの情報自体にはURLで決定、その他は直感的に扱い易い扱いに設定しています

* ページング

ブログ自体は５件表示にしています

Datastoreで(次の５件)を行うにはCursorを利用します

一度は単純にCursorの文字列でページングをしていたのですが、そのURLを検索エンジンに覚えられてもだったのでページ数を指定して、それをmemcacheに設定してアクセスしています

    err = memcache.Set(c, &memcache.Item{
        Key:   "article_" + strconv.Itoa(p+1) + "_cursor",
        Value: []byte(cur.String()),
    })

みなさんどうされているんだろ？

* どこまで無料？

現在運用中の３つのブログでは課金設定をしていません

アルファブロガーなわけでもないので、有効なビュー数等を用いて計算をしたわけではないですが、現在の試算ではDay:10000PVまでは行けるとみています

* ログイン

* 管理画面

/admin/ でログインできるようにしています
Googleアカウントでログインできます。

app.yamlでURLのloginにadmin,secureにalwaysを追加するだけで

   - url: /admin/.*
     script: _go_app
     login: admin  
     secure: always

admin設定のユーザだけログイン可能になります

* アカウントの追加

コンソールの「IAM & Admin」でアカウントの追加は可能なんですが、少し権限を与えすぎているかも。。。

※現在appengineのOwnerを与えている

* ファイルの扱い(画像)

* キーとURL

ファイルデータのキーを名称にしているのですが、固定データとして

- 製作者のアイコン
- ブログの背景

その辺りと重複するのが嫌だったので、実際のキーは

- 登録データ = (data/xxx)
- アイコンデータ = (avatar/xxx)
- 背景データ = (bg/xxx)

として登録をしていますURLはこれに「file」を付けてアクセスしています

* 画像のリサイズ

先ほど説明したように、このブログはかならず画像をアップロードかけます。
なので1MB超えたファイルをアップされた場合にリサイズを行います

.link http://github.com/nfnt/resize

というパッケージを使って

    resize.Resize(1000, 0, img, resize.Lanczos3)

簡単に行うことができます
※現状は横1000が固定なのでアルゴリズムを考え中

* Exif情報

写真データをアップロードされた場合、Exif情報により横向きになったりしてしまう問題があり、

.link github.com/rwcarlsen/goexif/exif

辺りを使って解決したいのですが、現状検証中です

* レンダリング

* ブログアクセス時のレンダリング

ブログアクセス時に

- 複数のKindにアクセス
- マークダウンの作成(present)
- レンダリング
- HTMLの出力

を行うとCPUやDatastoreのアクセス、そして閲覧者のページ表示スピードなどをかなり消費するので、公開処理を行う形を取っています

* 悩んだ点

* コメント

コメントの導入は非常に迷いました
コメントは動的に動作するものなので、現在のHTMLを静的に持っている仕組みとは少し相性が良くないです

Ajax化して埋め込みにすることも考えたんですが、下手に実装するとスパム対策なども必要になってくると考えて、現在は実装していません。

おそらく実施するとしたら、コメントサービスとの連携で行うと思います

* 静的な出力

キャッシュなどを強力にする為に静的な出力もありかな？と思ったのですが、

逆に開発環境で運用したいなぁ。。。とも思ったり。。。
※ローカルのデータ保存っていま方法ってないですかね？
