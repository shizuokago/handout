Let's Go out to Tour.
Shizuoka.go
26 Jul 2015
Tags: golang shizuoka_go

secondarykey
Programer
admin@localhost
http://github.com/secondarykey
@secondarykey

* 自己紹介

- name:secondarykey
- job:Programer
- Twitter:secondarykey
- GitHub :secondarykey

* Shizuoka.go

言語戦争の話

* Go言語の特徴

Googleが開発している新しい言語

GCあり！

並行処理(スレッドではない)

GAEで使用可能

* Gopher君について

* どこで使われているか？	

- vitess
MySQLのロードバランサ(YouTube)

- Doozer
PaxosのGo実装(Heroku)

- Docker
Linux Container Engine

GoConの話もいれておく

* 様々な可能性

NaCl
Mobile
GoogleAppEngine
Solaris

* 今回のハンズオンについて

A Tour of Go
のみもの
トイレ
休憩について


* Go言語の世界へようこそ

* 1.機能の説明

package, import については後述

- Syntac on/off
- Reset
- Format
- Run
- prev/next

* Goコマンド

- go run
- go build
- go fmt
- go get ~
- go test
- go ~etc

* GOROOTとGOPATH


* 2.Go local

日本語を選ばないでください。
えーとみなさんご存じのとおり、
新しいものは日本語訳のものは読まない方がよいと思います。
ほとんどの場合、日本語で読むと非常に遅い情報になります。
本家が出してくれてるものを読んだほうがよいでしょう


* 3.The Go Playground

Playgroundという機能で実現しています。
時刻は正確ではないので注意が必要です
※乱数は乱数にならない

* まずは基本から

* 1.パッケージ

パッケージメソッドの使用

math/rand#Intn() を使用

* Ex:パッケージの概念

相対、階層の話

init()の話


* 2.インポート

import ()でも可能、改行してもOK


* Ex:インポートのあれこれ

名称の変更
_ での読込
. での読込


* 3.パッケージメソッドの使用

math.Pi()を使用しています。
アクセス指定子はないです。
別のパッケージから呼び出すようなメソッドは
大文字から開始します。

* 4-5.関数の書き方

4
func ~~~() {} という書き方をします。
引数、戻り値見たいに書きます

5
引数の型の省略
２つ以上同じものが続く場合は省略して記述することも可能です

* 6-7.複数の戻り値

6
Goの特徴の１つ複数の戻り値を書き込めます

7
戻り値の名称にしておくことも可能です。


* 8-10.変数の宣言

8
var を利用して変数を宣言します。
パッケージ内変数、ローカル変数になります。

9
変数の初期化する場合そのまま横に記述していきます。
型がいらないのですが、

10
「:=」で簡単に宣言します。

* 11-12.基本的な型

%Tで型を表示

<< シフト演算
cmplxは複素数を利用するときのパッケージです


12.

代入しないときの値は基本0などです。


* 13-14.変換方法

13 変換方法

uint(),float64()などで行う

文字列と数値はstrconvパッケージを使うが
Sprintf()などを使うのもよし

14.型を省略した場合の型

通常,整数はint,少数はfloat64,複素数型はcomplex128


* 15.定数

constで宣言します:=は使えませんし、

使い方で型を変更してくれる
型を省略した場合の型

16. がその例

* 制御してみよう！

* 1-4.for文

Goの繰り返しは唯一Forのみです。
初期化、継続条件、式
() はいらない

2.条件だけでも書けるのですが、
セミコロンは必要ありません。(fmtで消えます)
3.まぁようはWhileです

4.永久ループはForを書くのみです。

* 5-7.if文

これも() は必要ないです。

6.if文でそのまま代入して使用できます
7.elseでもそのときの変数を使用できます
  else if です。

* 8.例題:平方根を求めよ

* さぁ実践です

オリジナルのSqrt()を作成して呼び出してみましょう！

ニュートン法を用います

z = z - ((z^2 - x) / 2z)

- 引数xをZに代入
- 10回ループ
- 数式を当てはめる

これでmath.Sqrt()の近似値がでます。


* 9.Switch文

さぁSwitch文ですが、breakは存在しません。
これもGoの特徴かもですね。
次のcaseに入れたい場合はfallthroughが必要です

10.上部を無視してif文のようにも書けます。
11.そのまま単純に条件式を書くこともできます


* 12.defer

これで後処理を行うことができます。

サンプル（ファイルのOpen()後にClose()）

13.deferはため込まれます


* Ex:Goのエラー処理

panic(), recover()


* もっと奥へ

* 1.ポインタ

* 2.構造体

* 3.フィールド

* 4.構造体のポインタ宣言

* 5.構造体の初期化

※この書き方はやめる

* 6.配列

* 7.スライス

* 8.スライスの特徴

* 9.スライスのmake()

* 10.スライスの初期値はnil

* 11.スライスのappend()

* 12.rangeによるループ

* 13.ループ時に値だけ受け取る

* 14.式による描画

* 15.マップ

* 16.マップの初期化

17

* 18.マップの操作

* 19.例題：ワードカウンター

* 20.関数を変数として操作

* 21.クロージャー

* 22.例題：フィボナッチ数列

* 

* 1.構造体へメソッド追加

* 2.typeへの追加もできる

type hoge struct

type hoge float64

* 3.レシーバーをポインタにする

* 4.interface

- sortの話

* 5.implementはいあない

* 6.Stringerについて

* 7.例題:Stringerの実装

* 8.errorについて

* 9.例題：Errorsの実装

* 10.Readerについて

* 11.例題：Reader

* 12.例題：Rot13Reader

* 13.WebServerの実装

* 14.例題：WebServerの実装

* 15.Imagesもあるよ

* 16.例題：Imagesの実装

* ゴルーチン

* 1. 使い方

* 2. チャネル

* 3. 数量指定もできる

* 4. Closeで明示的に閉じる

* 5.Select

* 6.defaultもある

* 7.例題バイナリツリー

* 8,9 例題は割愛

* 終了
