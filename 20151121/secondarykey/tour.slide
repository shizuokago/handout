Let's Go out to Tour.
Shizuoka.go
21 Nov 2015
Tags: golang shizuoka_go

secondarykey
Programer
admin@localhost
http://github.com/secondarykey
@secondarykey

* 自己紹介

- name:secondarykey
- job:Programer
- Twitter:secondarykey
- GitHub :secondarykey

* 参加いただきありがとうございます

本日はハンズオン形式です
.link https://tour.golang.org/welcome/1 A Tour of Go
をやっていきます

休憩は一度だけ入れる予定ですが
質問はもちろん、トイレなども自由に行ってください


* Shizuoka.go

* 成り立ち

Goの乱を2014年(正しくは2013)に起こして現在に至ります
2016年も引き続きやっていく予定でいます
何卒よろしくお願いします

.link http://www.slideshare.net/KazufumiOhkawa/ss-42415176 言語戦争の話

.link shizuoka.go Shizuoka.go

* Go言語概要

* 特徴

2009年に生まれたGoogle製の言語
最近の言語の中では比較的新しく様々な言語の良さを取り入れています

- コンパイル速度
- GCあり
- 軽量な並行処理
- クロスコンパイル

.caption そしてなにより！

* Gopher君かわいい!

ここで画像を入れる
.caption ここでみなさんにお得な情報が！

* 様々な可能性

* 多くの機能が存在

私自身は言語としてGoが好きなんですけど
思っているより、コマンドツールなどを作られている方が多く感じます

- Local Web
- GoogleAppEngine
- GoMobile(iOS,Android)
- NaCl
- Plan9,Solaris

* どこで使われているか？	

案外、いろんな製品の裏側で動いています

- vitess
MySQLのロードバランサ(YouTube)

- Doozer
PaxosのGo実装(Heroku)

- Docker
Linux Container Engine

- etc

* Go Conference 2015 Summer

東京で話を聞いてきましたが、多数の企業のサービスの裏側で動いており
そのほとんどが人員募集していました
※GoConだから当たり前ですが

.link http://gocon.connpass.com/event/14063/ Go Conference 2015 Summer

* ということで

ハンズオンに入っていきたいと思います

- Welcome 1-5
- Basics 1-17
- Flow Control 1-14
- More Types 1-24
- Methods 1-17
- Concurrency 1-10

うち何枚かは〆だったり、省略したりします
表題の数値がページ、Exと書いてあるのは書いてないことです

* Go言語の世界へようこそ

* 1.機能の説明

ここではTourの動かし方などをやっていきます

- Syntac on/off
- Reset
- Format
- Run
- prev/next

言語の説明は次の章からです

* Ex:Goコマンド

本日はWeb上で動作させますが、基本的にはSDKダウンロードして
コマンドでコンパイルしたり動作させたりします

- go run
- go build
- go fmt
- go get ~
- go test
.caption 代表的なコマンド

* Ex:環境設定

ローカルで動作させる場合は環境変数を２つ準備してあげる必要があります

- GOROOT
Go SDKの場所を設定します

- GOPATH
go get で取得してきたライブラリの置き場

GOROOT/binにgoコマンドがあります

* 2.Go local

言語選択ですが、絶対日本語を選ばないでください
現在も日本語のツアーはちょっとちぐはぐしているので英語サイトでいきましょう
※そのままnextを押します

* 3.Go offline

Tourはオフラインでも実行することが可能です
先ほどの設定を行い、go getしてgotourを実行するだけです

* 4.The Go Playground

Tourは
.link Playground https://play.golang.org/
という機能で実現しています
Web上でGoを実行する仕組みです

注：時刻は正確ではないので注意が必要です
※乱数は乱数にならない

* 5. Tourの紹介終わり

まぁここは特に問題ないと思います
何か質問があれば受け付けます！


* まずは基本から

* 1.パッケージ

Goの処理はすべてパッケージに書いていくのでpackageから始まります
package mainは実行ファイルが呼び出す最初の処理で、main()は必ず必要です
※GAEなどは違う

importしてあるfmt,math/randを標準パッケージと呼びます
$GOROOT/src にソースはあります

読み込んだパッケージのメソッドの呼び出し方法が
ここに書かれています

fmt.Println()は標準出力です
math/rand#Intn()を使用していますが、前述の通り乱数は発生しません

* Ex:パッケージの概念

math/rand の様にディレクトリを作成すると
そこにパッケージを作成することができます

GOPATHを特に指定してない状況なら相対パスで指定できます

パッケージにはinit()という予約された処理があり
パッケージを読み込んだ時の初期化として動作させることができます

* 2.インポート

import は () で書き込んで行きます
左にある様に１行ずつ書いてもOKです

ちなみに使ってないパッケージはコンパイルエラーになります

* Ex:インポートのあれこれ

import には様々な書き方があります

.code import.go 

一番上が別名を付ける方法です
"."は、先ほどfmtとかを書いていましたが、そのパッケージのメソッドを同一階層っぽく使えるようにすることが可能になります
"_" は読み込むがメソッドは使わない。という難易度の高いやつです
init()だけをやらせたいとかいう場合に使います


* 3.パッケージメソッドの使用

実行してみてください。

エラーが起こります。
Goにはアクセス指定子はないのですが、最初が大文字か小文字かで
別のパッケージから呼び出せるかを決定します

別のパッケージからアクセスする場合は大文字から開始します
これは後述する構造体などにも適用されます

* 4-5.関数の書き方

- 4 基本的な書き方

func ~~~() {} という書き方をします
引数は変数名 型と書いて、戻り値を書きます

- 5 引数の型省略

引数の型の省略
２つ以上同じものが続く場合は省略して記述することも可能です

* 6-7.戻り値

- 6 複数の戻り値

Goの特徴の１つ、複数の戻り値を指定します
,区切りで処理してください

後述しますが、Goには例外が存在しません
複数の戻り値を利用して、errorを伝搬して処理します
※俗に言うエラー地獄

- 7 名称を指定して変数で扱う

戻り値に名前を付けて関数内で処理することが可能です
この際に戻り値を指定する必要はありません

* 8-10.変数の宣言

- 8 基本的な宣言

var を利用して変数を宣言します
パッケージ内変数、ローカル変数になります

- 9 初期値

変数の初期化する場合そのまま横に記述していきます
型は勝手に処理されます

- 10 一番やるやーつ

var も書かずに「:=」で簡単に宣言できます
関数の戻り値などはこれで処理することが多いです
ただし２度目の受け取りだとコンパイルエラーです

* 11-12.基本的な型

- 11 型一覧

%Tで型を表示しています

<< シフト演算
cmplxは複素数を利用するときのパッケージです
※64ビット左に変更して-1して一番大きな数値を取得しています


- 12 初期値

代入しないときの値は基本0です。
文字列はnil(NULL)が存在しないので””になります


* 13-14.変換方法

- 13 変換方法

uint(),float64()などで行う

文字列と数値はstrconvパッケージを使うが
fmt#Sprintf()などを使うのもよし

- 14.型を省略した場合の型

通常,整数はint,小数はfloat64,複素数型はcomplex128

* 15-16.定数

- 15 宣言

constをつけると勝手に型を判断してくれます。
パッケージ内定数と関数内での宣言とあります

:= ではダメです

- 16 優秀な型変換

constは厳密にいうと型を持っていないので
このように整数を受け取る関数や小数点を受け取る関数に
そのまま渡してもコンパイルエラーにはなりません


* 17 お疲れ様でした

これで基本編は終了です
少しGo書き方もわかってきたと思います

ご質問等あれば受け付けます


* 制御してみよう！

* 1-4.for文

- 1 基本的な書き方

初期化、継続条件、ループ時の処理
breakすると抜けれます
()は必要ありません

- 2 条件のみ記述

条件だけでも書けます

- 3 While

2の表現はwhileで、;は実は必要ありません
2でfmtを打てばわかりますが、;は消えます

- 4 永久ループ

forを書くのみです(forever)

* Ex:goto文

ちなみにですが多重ループみたいなのをこんな感じで抜けることが可能です

.code goto.go  /^func main/,/^}/

goto ステートメントもあるので

    goto L

でも可能です

* 5-7.if文

- 5 基本的な書き方

if にも()は必要ないです

- 6.if内宣言

宣言省略を利用して;でつなげることで
そのままif内のみで使用することが可能です

- 7.スコープ

else,else if でも使用できます
if 後に変数を使用しようとするとコンパイルエラーになります

* 8.例題:平方根を求めよ

ニュートン法を用いて、平方根を求めるような処理を書きます
.image newton.png
オリジナルのSqrt()を作成して呼び出してみましょう！

    z = z - ((z^2 - x) / 2z)

この式を10回繰り返すと平方根の近似値が出ます

* 8.解答例

.code sqrt.go  /^func Sqrt1/,/^}/
.code sqrt.go  /^func Sqrt2/,/^}/


* 9-11.Switch文

- 9 基本

GoのSwitchにはbreakは存在しません
次のcaseに入れたい場合は
    fallthrough
が必要です

- 10 判定に計算式

式や関数を書いて判定することもできます
この場合は曜日判定ですね

- 11 条件なし

条件式をなしにして、caseに条件を書くことも可能です

* 12-13.defer

- 12 基本

deferは呼び出されてすぐに処理するのではなく、
そのスコープが終わる時に呼び出される処理を書きます
ただし関数に関数を渡すような処理は関数が実行されてから
deferに渡される為、注意が必要です

.code defer.go 5,11

- 13 LIFO

deferは貯めこまれて行き、処理する順序はLIFOになります

* Ex:Goのエラー処理

前述で少し言いましたが、Goには例外処理がありません
プロセスを継続しがたい問題が発生した時は

    panic

が発生します
panic()で明示的に起こすことも可能です

このpanicを例外的に扱う機構としてrecover()が存在します
例を次のページにあげてはおきますが、
以下のことが標準ライブラリに書いてあります

- 外部に公開するAPIはpanic()を伝えない
- スタックが深くなるような処理を完結に処理する為だけに使用する

 なので、しっかりした理由がない場合はrecover()は使用しません

* Ex:例外処理の例

.code recover.go  /^func main/,/^}/

panicが発生してもdeferは呼び出されるので
panicが起ころうが処理を継続したい場合にdeferし、
recover()にエラー原因があるはずなので
それを元に業務に戻れるようなら戻すような処理をします

* 14.お疲れ様でした

制御文を書けるようになったということは
簡単な処理はすべてできるようになったということですね

Gopherと呼ばれるまでもう少しです


* もっとくわしく

* 1.ポインタ

みんな大好きポインタです
Goにもポインタが存在します
ポインタなので代入なしの初期値はnilになります

この例ではiのアドレスをpにして、
pの値を出した時はiと同じになり、
pの値をいじるとiも変更になる

同じくjのアドレスを入れてpをいじるとjも変わる

ポインタ演算はありません


* 2.構造体

* 3.フィールド

* 4.構造体のポインタ宣言

* 5.構造体の初期化

※この書き方はやめる

* 6.配列

* 7.スライス

* 8.スライスの特徴

* 9.スライスのmake()

* 10.スライスの初期値はnil

* 11.スライスのappend()

* 12.rangeによるループ

* 13.ループ時に値だけ受け取る

* 14.式による描画

* 15.マップ

* 16.マップの初期化

17

* 18.マップの操作

* 19.例題：ワードカウンター

* 20.関数を変数として操作

* 21.クロージャー

* 22.例題：フィボナッチ数列

* 

* 1.構造体へメソッド追加

* 2.typeへの追加もできる

type hoge struct

type hoge float64

* 3.レシーバーをポインタにする

* 4.interface

- sortの話

* 5.implementはいあない

* 6.Stringerについて

* 7.例題:Stringerの実装

* 8.errorについて

* 9.例題：Errorsの実装

* 10.Readerについて

* 11.例題：Reader

* 12.例題：Rot13Reader

* 13.WebServerの実装

* 14.例題：WebServerの実装

* 15.Imagesもあるよ

* 16.例題：Imagesの実装


* ゴルーチン！

* 1. 使い方

* 2. チャネル

* 3. 数量指定もできる

* 4. Closeで明示的に閉じる

* 5.Select

* 6.defaultもある

* 7.例題バイナリツリー

* 8,9 例題は割愛

* 終了
